1. ImportVision
2. define bs and path - URLs.PETS
3. tfms = get_transforms(max_rotate=20, max_zoom=1.3, max_lighting=0.4, max_warp=0.4,
                      p_affine=1., p_lighting=1.)
4. ImageList.from_folder(path).split_by_rand_pct(0.2, seed=2)
5. define func get_data - size, bs, padding_mode='reflection'
    returns src.label_from_re(r'([^/])+)_\d+.jpg$')
                      .transform(tfms, size=size, padding_mode=padding_mode)
                      .databunch(bs=bs).normalize(imagenet_stats)
    data = get_data(224, bs, 'zeros')
    _plot - i, j, ax
      x, y = data.train_ds[3]
      x.show(ax, y=y)
   plot_multi(_plot, 3, 3, figsize=8,8)
   data = get_data(224,bs)
   plot_multi(_plot, 3, 3, figsize=8,8)
6. gc.collect()
    learn = cnn_learner(data, models.resnet34, metrics=error_rate, bn_final=True)
    fitonecycle - 3, slice(1e-2), pct_start=0.8
    unfreeze
    fitonecycle - 2, slice(1e-6, 1e-3), pct_start=0.8
7. data = make 352, bs
    learn.data = data
    fitonecycle - 2, slice(1e-6, 1e-3)
    save - 352
8. # Convolutiona Kernel
    data - 352, 16
   learn = cnn_learner(data, models.resnet34, metrics=error_rate, bn_final=True).load(352)
9. idx=0
    x, y = data.valid_ds[idx]
    x.show()
    data.valid_ds.y[idx]
10. k = tensor([
    [0.  ,-5/3,1],
    [-5/3,-5/3,1],
    [1.  ,1   ,1],
]).expand(1,3,3,3)/6
  p k
  k.shape

11. t = data.valid_ds[0][0].data; t.shape
     t[None].shape
     edge = F.conv2d(t[None], k)
     show_image(edge[0], figsize=(5,5));
12. data.c
     learn.model
     learn.summary
13. # HeatMap
      m = learn.model.eval()
      xb, _ = data.one_item(x)
      xb_im = Image(data.denorm(xb)[0])
     xb = xb.cuda()
14. Import callbacks.hooks
      define hooked_backward - cat=y
       with hooked_output(m[0], grad=True) as hook_g:
               preds = m(xb)
               preds[0, int(cat)].backward()
      return hook_a, hook_g

      hook_a, hook_g = hooked_backward()
      acts = hook_a.stored[0].cpu()
      acts.shape
      
      avg_acts = acts.mean(0)
      avg_acts.shape

15. show_heatmap - hm
            _, ax = plt.subplots()
           xb_im.show(ax)
           ax.imshow(hm, alpha=0.6, extend=(0, 352, 352, 0), interpolation='bilinear', cmap='magma')

      show_heatmap(avg_acts)

16. # Grad-CAM
      grad  = hook_g.stored[0][0].cpu()
      grad_chan = grad.mean(1).mean(1)
      grad.shape, grad_chan.shape
  
      mult = (acts*grad_chan[...,None,None]).mean(0)
      show_heatmap(mult)

17. fn = path/'../other/bulldog_maine.jpg' #Replace with your own image
     x = open_image(fn); x

18. xb,_ = data.one_item(x)
      xb_im = Image(data.denorm(xb)[0])
      xb = xb.cuda()

19. hook_a,hook_g = hooked_backward()

      acts = hook_a.stored[0].cpu()
      grad = hook_g.stored[0][0].cpu()

       grad_chan = grad.mean(1).mean(1)
       mult = (acts*grad_chan[...,None,None]).mean(0)

      show_heatmap(mult)

20. data.classes[0]
      hook_a,hook_g = hooked_backward(0)
      
       acts = hook_a.stored[0].cpu()
       grad = hook_g.stored[0][0].cpu()

        grad_chan = grad.mean(1).mean(1)
        mult = (acts*grad_chan[...,None,None]).mean(0)

        show_heatmap(mult)
